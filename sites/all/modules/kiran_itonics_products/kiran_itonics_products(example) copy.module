<?php

/**
 * Implements hook_menu().
 */
function kiran_itonics_products_menu() {
  print_r('a');
  $items = array();

  // Product List
  $items['admin/products'] = array(
    'title' => 'Products',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kiran_itonics_products_list'),
    'access arguments' => array('administer products'),
    'type' => MENU_NORMAL_ITEM,
  );
  // Product Add/Edit Form
  $items['admin/products/add'] = array(
    'title' => 'Add Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kiran_itonics_products_form'),
    'access arguments' => array('administer products'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/products/%/edit'] = array(
    'title' => 'Edit Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kiran_itonics_products_edit_form', 1), // Ensure the correct argument index
    'access callback' => 'user_access',
    'access arguments' => array('administer products'),
    'type' => MENU_CALLBACK,
);

  return $items;
}

/**
 * Product list callback.
 */
function kiran_itonics_products_list() {

  $header = array('ID', 'Title', 'Owner Email', 'Expiry Date', 'Operations');
  $rows = array();

  $result = db_select('kiran_itonics_products', 'p')
    ->fields('p', array('id', 'title', 'owner_email', 'expiry_date'))
    ->execute();

  foreach ($result as $record) {
    $rows[] = array(
      $record->id,
      $record->title,
      $record->owner_email,
      format_date($record->expiry_date),
      l('Edit', 'admin/products/edit/' . $record->id) . ' | ' .
      l('Delete', 'admin/products/delete/' . $record->id),
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Product form callback.
 */
function kiran_itonics_products_form($form, &$form_state) {
  if (!is_array($form)) {
    $form = [];
}

if (!is_array($form_state)) {
    $form_state = [];
}

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Product Title'),
    '#required' => TRUE,
  );
  $form['type'] = array(
    '#type' => 'textfield',
    '#title' => t('type'),
  );

  $form['image'] = array(
    '#type' => 'managed_file',
    '#title' => t('Product Image'),
    '#upload_location' => 'public://product_images/',
  );

  $form['summary'] = array(
    '#type' => 'textarea',
    '#title' => t('Summary'),
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
  );

  $form['owner_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Owner Email'),
    '#required' => TRUE,
  );

  $form['expiry_date'] = array(
    '#type' => 'date',
    '#title' => t('Expiry Date'),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Product'),
  );

  return $form;
}

/**
 * Form submission handler.
 */
function kiran_itonics_products_form_submit($form, &$form_state) {
  $expiry_date = is_array($form_state['values']['expiry_date'])
  ? implode('-', $form_state['values']['expiry_date'])  // If it's an array, join day, month, year
  : $form_state['values']['expiry_date'];
  if ($expiry_date) {
    $expiry_date = strtotime($expiry_date); // Convert to timestamp if it's valid
  } else {
    $expiry_date = NULL; // Set to NULL if no valid date is provided
  }
  db_insert('kiran_itonics_products')
    ->fields(array(
      'title' => $form_state['values']['title'],
      'type' => $form_state['values']['type'],
      'image' => $form_state['values']['image'],
      'summary' => $form_state['values']['summary'],
      'description' => $form_state['values']['description'],
      'owner_email' => $form_state['values']['owner_email'],
      'expiry_date' => $expiry_date,  // Now this will be a string in Y-m-d format
      ))
    ->execute();

  drupal_set_message(t('Product saved successfully.'));
  drupal_goto('admin/products');
}

function kiran_itonics_products_delete($form, &$form_state, $product_id) {
  $form['confirm'] = array(
    '#type' => 'markup',
    '#markup' => t('Are you sure you want to delete this product?'),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'admin/products'),
  );

  $form['product_id'] = array(
    '#type' => 'hidden',
    '#value' => $product_id,
  );

  return $form;
}

/**
 * Submission handler for delete.
 */
function kiran_itonics_products_delete_submit($form, &$form_state) {
  db_delete('kiran_itonics_products')
    ->condition('id', $form_state['values']['product_id'])
    ->execute();

  drupal_set_message(t('Product deleted successfully.'));
  drupal_goto('admin/products');
}


/**
 * Implements a menu item for editing a product.
 */

/**
 * Edit form for a product.
 */
function kiran_itonics_products_edit_form($form, &$form_state, $product_id) {
  // Load the product from the database.
  $product = db_select('kiran_itonics_products', 'p')
      ->fields('p')
      ->condition('id', $product_id)
      ->execute()
      ->fetchAssoc();

  if (!$product) {
      drupal_not_found();
      exit;
  }

  // Build the form.
  $form['product_id'] = array(
      '#type' => 'hidden',
      '#value' => $product_id,
  );

  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => $product['title'],
      '#required' => TRUE,
  );
  $form['type'] = array(
    '#type' => 'textfield',
    '#type' => t('type'),
    '#default_value' => $product['type'],
    '#required' => TRUE,
);

  $form['image'] = array(
      '#type' => 'managed_file',
      '#title' => t('Image'),
      '#default_value' => $product['image'],
      '#upload_location' => 'public://product_images/',
      '#required' => FALSE,
  );

  $form['summary'] = array(
      '#type' => 'textarea',
      '#title' => t('Summary'),
      '#default_value' => $product['summary'],
  );

  $form['description'] = array(
      '#type' => 'text_format',
      '#title' => t('Description'),
      '#default_value' => $product['description'],
      '#format' => 'filtered_html',
  );

  $form['category'] = array(
      '#type' => 'select',
      '#title' => t('Category'),
      '#options' => _kiran_itonics_products_category_options(),
      '#default_value' => explode(',', $product['category']),
      '#multiple' => TRUE,
  );

  $form['type'] = array(
      '#type' => 'radios',
      '#title' => t('Type'),
      '#options' => array(
          'physical' => t('Physical'),
          'digital' => t('Digital'),
      ),
      '#default_value' => $product['type'],
  );

  $form['owner_email'] = array(
      '#type' => 'email',
      '#title' => t('Owner Email'),
      '#default_value' => $product['owner_email'],
      '#required' => TRUE,
  );

  $form['expiry_date'] = array(
      '#type' => 'date',
      '#title' => t('Expiry Date'),
      '#default_value' => $product['expiry_date'],
  );

  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update Product'),
  );

  return $form;
}
/**
 * Form submission handler for the edit form.
 */
function kiran_itonics_products_edit_form_submit($form, &$form_state) {
  $product_id = $form_state['values']['product_id'];
  $expiry_date = is_array($form_state['values']['expiry_date'])
    ? implode('-', $form_state['values']['expiry_date'])  // If it's an array, join day, month, year
    : $form_state['values']['expiry_date'];  // If it's already a string, use it as is

  // Update the product in the database.
  db_update('kiran_itonics_products')
      ->fields(array(
          'title' => $form_state['values']['title'],
          'type' => $form_state['values']['type'],
          'image' => $form_state['values']['image'][0],
          'summary' => $form_state['values']['summary'],
          'description' => $form_state['values']['description']['value'],
          'category' => implode(',', $form_state['values']['category']),
          'owner_email' => $form_state['values']['owner_email'],
          'expiry_date' => strtotime($expiry_date),  // Convert expiry date to timestamp
      ))
      ->condition('id', $product_id)
      ->execute();

  drupal_set_message(t('Product "@title" has been updated.', array('@title' => $form_state['values']['title'])));
  drupal_goto('admin/products');
}

/**
 * Returns category options for the product.
 */
function _kiran_itonics_products_category_options() {
  return array(
      'electronics' => t('Electronics'),
      'furniture' => t('Furniture'),
      'clothing' => t('Clothing'),
  );
}

function kiran_itonics_products_permission() {
  return array(
    'administer products' => array(
      'title' => t('Administer Products'),
      'description' => t('Perform CRUD operations on products.'),
    ),
  );
}
